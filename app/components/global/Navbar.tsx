"use client";
import Image from "next/image";
import { useEffect, useRef, RefObject, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Link from "next/link";
import { usePathname } from "next/navigation";

const backgroundVariants = {
  open: {
    opacity: 1,
    y: 0,
    height: "100vh",
    transition: {
      // type: "spring", // Specifying spring type here
      stiffness: 260,
      damping: 20,
      staggerChildren: 0.4,
      duration: 0.5,
    },
  },
  closed: {
    opacity: 1,
    y: "-100%",
    height: 0,
    transition: { duration: 1, ease: "easeInOut" },
  },
  exit: {
    opacity: 1,
    y: "-100%",
    transition: { duration: 0.5, ease: "easeInOut" },
  },
};

const navVariants = {
  open: {
    opacity: 1,
    transition: { staggerChildren: 0.06, delayChildren: 0.15, duration: 0.3 }, // delayChildren starts the staggering after the menu opens
  },
  closed: {
    opacity: 0.4,
    transition: { staggerChildren: 3, staggerDirection: -1, duration: 0.5 }, // staggerDirection -1 makes the children animate in reverse order
  },
};

const itemVariants = {
  open: {
    opacity: 1,
    y: "0%",
    transition: { duration: 0.2 },
  },
  closed: {
    opacity: 0,
    y: "-100%",
    transition: { duration: 0.2 },
  },
};

const navLinks = [
  { name: "Home", href: "/" },
  { name: "About", href: "/about" },
  { name: "Services", href: "/services" },
  { name: "Projects", href: "/projects" },
  { name: "Contact", href: "/contact" },
];

function Navbar() {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState(false);
  const [searchIsOpen, setSearchIsOpen] = useState(false);
  const [hoveredLink, setHoveredLink] = useState<string | null>(null);
  const [darkText, setDarkText] = useState<boolean | false>(false);

  useEffect(() => {
    // Reset hover state when the route changes
    setHoveredLink(null);

    pathname == "/about" || pathname == "/projects" || pathname == "/contact"
      ? setDarkText(true)
      : setDarkText(false);
  }, [pathname]);

  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 80) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    typeof window !== "undefined" &&
      window.addEventListener("scroll", handleScroll);

    // Clean up the event listener when the component unmounts
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <div
      className={`relative z-50 small:fixed top-0 left-0 w-full text-white ${
        searchIsOpen || isOpen ? "fixed" : "fixed"
      } ${isScrolled ? "bg-theme_peach-900" : ""}`}
    >
      <header className="header relative tracking-[0.06em] z-50 bg-theme_peach-900 small:bg-transparent">
        <div
          className={`relative z-50 max-w-screen-large mx-auto  ${
            isScrolled ? "xsmall:py-[0.8rem]" : "py-[0.8rem] small:py-[2.7rem]"
          }`}
        >
          <div className="flex items-center justify-between h-20 px-[5%] small:px-layout-small">
            <Link
              href="/"
              // className={`header__logo text-[2rem] font-caslon font-[400] uppercase tracking-widest ${
              //   isScrolled || darkText ? "text-theme_black-900" : "text-white"
              // }`}
              className={`w-[50px] aspect-square transition-all duration-300 ${
                isScrolled ? "small:w-[50px]" : "small:w-[70px]"
              }`}
              aria-label="home"
            >
              {/* header-logo */}
              {/* Bloxie. */}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                // width="440"
                // height="387"
                viewBox="0 0 440 387"
                fill="none"
              >
                <rect
                  x="10"
                  y="10"
                  width="420"
                  height="367"
                  fill="white"
                  stroke="black"
                  strokeWidth="20"
                />
                <path
                  d="M119.682 118.811C123.989 124.251 127.162 128.784 129.202 132.411C131.242 135.924 132.262 140.061 132.262 144.821C132.262 146.747 132.092 148.844 131.752 151.111C129.939 161.197 125.236 168.111 117.642 171.851C110.049 175.477 100.302 177.291 88.4022 177.291C84.8889 177.291 73.8955 176.611 55.4222 175.251C55.0822 166.751 54.9122 153.151 54.9122 134.451C54.9122 114.164 54.9689 95.8608 55.0822 79.5408V57.4408C65.0555 54.6075 74.6322 53.1908 83.8122 53.1908C96.6189 53.1908 107.102 56.0241 115.262 61.6908C123.536 67.2441 127.672 76.4241 127.672 89.2308C127.672 97.5041 124.782 106.514 119.002 116.261V116.091C118.776 116.544 118.662 116.884 118.662 117.111C118.662 117.451 119.002 117.961 119.682 118.641V118.811ZM100.812 89.2308C99.1122 86.0575 96.9589 84.1308 94.3522 83.4508C92.5389 83.2241 91.1222 83.1108 90.1022 83.1108C87.1555 82.8842 84.9455 82.6008 83.4722 82.2608C83.8122 84.1875 83.9822 87.1342 83.9822 91.1008V97.2208C83.9822 100.054 84.0389 102.264 84.1522 103.851H89.0822C94.0689 103.851 97.4689 102.151 99.2822 98.7508C100.756 96.0308 101.492 93.8208 101.492 92.1208C101.492 91.1008 101.266 90.1375 100.812 89.2308ZM100.812 141.421C100.812 139.494 100.472 137.397 99.7922 135.131V135.301C99.2255 134.054 98.4322 132.921 97.4122 131.901C96.3922 130.881 95.3722 130.257 94.3522 130.031C92.5389 129.577 89.8755 129.237 86.3622 129.011C86.0222 129.011 85.6255 129.067 85.1722 129.181C84.8322 129.181 84.4355 129.124 83.9822 129.011C82.8489 133.771 82.2822 137.907 82.2822 141.421C82.2822 145.501 82.9055 148.674 84.1522 150.941C88.2322 151.054 91.4055 150.941 93.6722 150.601C96.0522 150.147 98.0355 148.957 99.6222 147.031C100.416 145.897 100.812 144.027 100.812 141.421Z"
                  fill="black"
                />
                <path
                  d="M264.23 165.76C264.344 167.12 264.4 169.103 264.4 171.71C264.4 174.09 264.174 175.79 263.72 176.81C263.38 177.717 262.814 178.283 262.02 178.51C261.227 178.737 259.867 178.85 257.94 178.85H256.75L254.03 178.68L249.61 178.85C242.584 179.077 232.214 179.19 218.5 179.19C205.467 179.19 195.097 179.133 187.39 179.02V175.11C188.184 156.41 188.58 137.597 188.58 118.67C188.58 113.117 188.467 103.54 188.24 89.94V85.86V79.57C188.127 77.6433 188.07 74.1867 188.07 69.2L187.9 58.15C189.487 57.5833 191.697 57.13 194.53 56.79C197.364 56.3367 200.197 56.11 203.03 56.11C206.204 56.11 209.377 56.3367 212.55 56.79C215.724 57.2433 218.274 57.8667 220.2 58.66C219.974 66.82 219.86 73.3367 219.86 78.21C219.86 85.01 219.974 95.21 220.2 108.81C220.314 115.61 220.37 125.64 220.37 138.9V149.95C224.11 149.95 228.7 150.12 234.14 150.46L243.15 150.8C247.91 151.14 252.387 151.31 256.58 151.31C259.527 151.31 262.134 151.197 264.4 150.97C264.4 153.577 264.344 155.277 264.23 156.07V155.9C264.004 158.96 263.947 161.17 264.06 162.53L264.23 165.76Z"
                  fill="black"
                />
                <path
                  d="M382.471 87.9C382.811 91.4133 382.981 94.9833 382.981 98.61L382.811 101.67V104.73C382.584 108.47 382.471 113.967 382.471 121.22C382.471 129.267 382.301 135.387 381.961 139.58L381.451 145.19C380.884 154.37 378.561 162.19 374.481 168.65C372.781 171.03 370.231 173.127 366.831 174.94C363.431 176.753 359.691 178.227 355.611 179.36C351.418 180.607 346.488 181.23 340.821 181.23C338.214 181.23 336.401 181.173 335.381 181.06C329.828 180.607 324.841 179.417 320.421 177.49C316.114 175.45 312.941 172.503 310.901 168.65C308.181 163.55 306.708 157.147 306.481 149.44L306.141 144C306.028 143.093 305.971 141.223 305.971 138.39C305.404 129.097 305.121 120.2 305.121 111.7C305.121 106.487 305.291 101.273 305.631 96.06C305.971 90.3933 306.934 84.8967 308.521 79.57C310.221 74.13 312.771 69.37 316.171 65.29L319.911 63.25C327.164 59.7367 335.098 57.98 343.711 57.98C349.151 57.98 354.251 58.7167 359.011 60.19C363.884 61.55 368.134 63.59 371.761 66.31C375.728 69.9367 378.334 73.5067 379.581 77.02C380.941 80.6467 381.904 84.2733 382.471 87.9ZM356.121 106.43L355.441 97.59C355.214 94.4167 354.421 91.64 353.061 89.26C351.814 86.7667 350.171 85.01 348.131 83.99C347.224 83.65 346.318 83.48 345.411 83.48C342.691 83.48 340.028 84.3867 337.421 86.2C336.061 87.3333 334.701 88.9767 333.341 91.13C332.094 93.17 331.131 95.2667 330.451 97.42C329.318 102.407 328.751 108.753 328.751 116.46C328.751 120.313 328.808 123.203 328.921 125.13V124.96C329.374 127.227 329.714 130.23 329.941 133.97L330.111 136.35C330.564 142.017 331.188 146.21 331.981 148.93V148.76C333.001 151.027 334.474 152.783 336.401 154.03C338.441 155.163 340.594 155.73 342.861 155.73C344.674 155.73 346.488 155.333 348.301 154.54C350.228 153.633 351.871 152.387 353.231 150.8C354.364 149.327 355.044 148.08 355.271 147.06C355.611 146.04 355.781 144.453 355.781 142.3C355.781 140.373 355.838 138.957 355.951 138.05L356.121 135.84L356.291 132.61V130.23L356.461 127V118.84L356.121 107.28V106.43Z"
                  fill="black"
                />
                <path
                  d="M125.299 270.651C126.319 275.638 127.679 281.191 129.379 287.311C131.079 293.431 132.779 299.324 134.479 304.991C137.085 313.378 139.409 321.538 141.449 329.471C138.729 329.244 136.745 329.131 135.499 329.131L124.959 329.301C120.085 329.301 116.175 328.848 113.229 327.941C112.322 325.901 111.359 323.238 110.339 319.951C109.432 316.664 108.412 312.641 107.279 307.881C106.599 305.614 105.522 301.534 104.049 295.641L103.029 299.041C101.555 304.254 99.6852 310.318 97.4185 317.231C95.2652 324.144 93.9052 328.054 93.3385 328.961L87.0485 329.131C85.5752 329.244 83.4218 329.301 80.5885 329.301C74.8085 329.301 69.7652 328.621 65.4585 327.261C67.8385 320.121 71.3518 309.014 75.9985 293.941C80.7585 278.754 83.1385 270.651 83.1385 269.631C79.1718 251.158 72.5985 231.608 63.4185 210.981C70.4452 210.414 78.8318 210.131 88.5785 210.131H94.3585C95.4919 214.551 97.1352 220.841 99.2885 229.001C101.442 237.161 102.802 241.694 103.369 242.601L105.919 233.931C107.505 227.924 109.772 219.821 112.719 209.621C120.652 209.168 130.965 208.941 143.659 208.941L125.299 270.651Z"
                  fill="black"
                />
                <path
                  d="M244.71 209.791C244.71 223.051 244.54 236.424 244.2 249.911C243.747 267.818 243.52 281.928 243.52 292.241C243.52 304.141 243.86 315.984 244.54 327.771C242.84 329.471 238.42 330.321 231.28 330.321C227.2 330.321 224.197 330.264 222.27 330.151L220.23 329.981L217.17 329.811C214.903 329.811 212.013 330.264 208.5 331.171C209.18 321.311 209.52 310.828 209.52 299.721C209.52 295.301 209.407 288.784 209.18 280.171L209.01 270.311C208.557 258.298 208.33 248.551 208.33 241.071C208.33 229.851 208.84 218.801 209.86 207.921C211.333 207.694 212.92 207.581 214.62 207.581C215.527 207.581 216.773 207.694 218.36 207.921C219.947 208.034 221.817 208.034 223.97 207.921C229.863 208.261 234.567 208.374 238.08 208.261H244.71V209.791Z"
                  fill="black"
                />
                <path
                  d="M383.677 313.491C383.677 319.271 383.054 324.428 381.807 328.961C376.82 328.961 369.454 329.074 359.707 329.301L337.437 329.471C327.35 329.471 317.264 329.131 307.177 328.451C307.29 324.824 307.12 310.714 306.667 286.121C306.327 272.181 306.157 261.471 306.157 253.991C306.157 238.464 306.554 224.014 307.347 210.641L322.307 210.131C339.08 209.451 351.887 209.111 360.727 209.111C368.32 209.111 375.687 209.394 382.827 209.961C383.28 212.341 383.507 215.118 383.507 218.291C383.507 219.991 383.394 222.768 383.167 226.621C382.94 230.248 382.827 233.081 382.827 235.121C376.027 236.594 368.434 237.331 360.047 237.331L337.947 237.501C337.38 242.828 337.097 247.248 337.097 250.761C337.097 253.481 337.437 255.861 338.117 257.901L349.337 256.541C350.924 256.541 353.304 256.654 356.477 256.881L358.687 257.051C359.254 260.451 359.537 264.134 359.537 268.101L359.197 281.701C355.57 282.721 350.697 283.231 344.577 283.231L340.157 283.061C339.364 283.061 338.854 283.174 338.627 283.401L337.947 292.241C337.947 296.888 338.174 300.741 338.627 303.801C344.52 303.801 350.244 303.971 355.797 304.311C357.724 304.424 360.104 304.538 362.937 304.651C365.77 304.764 369.114 304.821 372.967 304.821L383.337 304.481C383.564 309.694 383.677 312.698 383.677 313.491Z"
                  fill="black"
                />
              </svg>
            </Link>

            {/* ====== desktop nav ====== */}
            <div className="flex items-center">
              <div className="hidden small:block">
                <nav>
                  <ul
                    className={`nav__link__list flex items-center justify-between w-[38vw] max-w-[515px] capitalize  font-sans  text-[clamp(1.1rem,1vw,1.4rem)] small:pl-[1.9rem] ${
                      isScrolled || darkText
                        ? "text-theme_black-900"
                        : "text-white"
                    }`}
                  >
                    {navLinks.map((link) => {
                      let isActive = pathname === link.href;
                      if (!isActive && link.href !== "/") {
                        isActive = pathname.includes(link.href.split("/")[1]);
                      }
                      // Override isActive if this link is hovered or another link is being hovered
                      if (hoveredLink !== null) {
                        isActive = hoveredLink === link.href;
                      }

                      return (
                        <li
                          key={link.name}
                          onMouseEnter={() => setHoveredLink(link.href)}
                          onMouseLeave={() => setHoveredLink(null)}
                        >
                          <Link href={link.href} className="">
                            <div
                              className={`${
                                isActive && "nav__item__active"
                              } font-[300] nav__item__link text-right ${
                                isScrolled || darkText
                                  ? "nav__item__link--scrolled"
                                  : ""
                              }`}
                            >
                              {link.name}
                            </div>
                          </Link>
                        </li>
                      );
                    })}
                  </ul>
                </nav>
              </div>
            </div>

            {/* ==== nav extras ==== */}
            <div className="flex gap-[1rem] small:hidden">
              <div className="-mr-2 flex ">
                <button
                  onClick={() => setIsOpen(!isOpen)}
                  type="button"
                  className={`${
                    searchIsOpen && "hidden"
                  } w-[3.8rem] block xsmall:w-[4rem] aspect-square items-center justify-center p-[0.2rem] rounded-md text-theme_black-900`}
                  aria-controls="mobile-menu"
                  aria-expanded="false"
                >
                  <span className="sr-only">Open main menu</span>
                  {!isOpen ? (
                    <svg
                      viewBox="0 0 40 40"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M33.3333 17.917H16.6667C16.3351 17.917 16.0172 17.7853 15.7828 17.5509C15.5484 17.3165 15.4167 16.9985 15.4167 16.667C15.4167 16.3355 15.5484 16.0175 15.7828 15.7831C16.0172 15.5487 16.3351 15.417 16.6667 15.417H33.3333C33.6648 15.417 33.9828 15.5487 34.2172 15.7831C34.4516 16.0175 34.5833 16.3355 34.5833 16.667C34.5833 16.9985 34.4516 17.3165 34.2172 17.5509C33.9828 17.7853 33.6648 17.917 33.3333 17.917Z"
                        fill="#2F3047"
                      />
                      <path
                        d="M33.45 11.25H6.78333C6.4518 11.25 6.13386 11.1183 5.89944 10.8839C5.66502 10.6495 5.53333 10.3315 5.53333 10C5.53333 9.66848 5.66502 9.35054 5.89944 9.11612C6.13386 8.8817 6.4518 8.75 6.78333 8.75H33.45C33.7815 8.75 34.0995 8.8817 34.3339 9.11612C34.5683 9.35054 34.7 9.66848 34.7 10C34.7 10.3315 34.5683 10.6495 34.3339 10.8839C34.0995 11.1183 33.7815 11.25 33.45 11.25Z"
                        fill="#2F3047"
                      />
                      <path
                        d="M33.45 24.583H6.78333C6.4518 24.583 6.13386 24.4513 5.89944 24.2169C5.66502 23.9825 5.53333 23.6645 5.53333 23.333C5.53333 23.0015 5.66502 22.6835 5.89944 22.4491C6.13386 22.2147 6.4518 22.083 6.78333 22.083H33.45C33.7815 22.083 34.0995 22.2147 34.3339 22.4491C34.5683 22.6835 34.7 23.0015 34.7 23.333C34.7 23.6645 34.5683 23.9825 34.3339 24.2169C34.0995 24.4513 33.7815 24.583 33.45 24.583Z"
                        fill="#2F3047"
                      />
                      <path
                        d="M33.3333 31.25H16.6667C16.3351 31.25 16.0172 31.1183 15.7828 30.8839C15.5484 30.6495 15.4167 30.3315 15.4167 30C15.4167 29.6685 15.5484 29.3505 15.7828 29.1161C16.0172 28.8817 16.3351 28.75 16.6667 28.75H33.3333C33.6648 28.75 33.9828 28.8817 34.2172 29.1161C34.4516 29.3505 34.5833 29.6685 34.5833 30C34.5833 30.3315 34.4516 30.6495 34.2172 30.8839C33.9828 31.1183 33.6648 31.25 33.3333 31.25Z"
                        fill="#2F3047"
                      />
                    </svg>
                  ) : (
                    <svg
                      viewBox="0 0 40 40"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M21.7667 19.9999L29.1333 12.6333C29.2561 12.5188 29.3546 12.3808 29.423 12.2275C29.4913 12.0742 29.528 11.9086 29.531 11.7408C29.5339 11.573 29.5031 11.4062 29.4402 11.2506C29.3773 11.095 29.2838 10.9536 29.1651 10.8349C29.0464 10.7162 28.905 10.6226 28.7493 10.5597C28.5937 10.4969 28.427 10.466 28.2591 10.4689C28.0913 10.4719 27.9258 10.5086 27.7724 10.577C27.6191 10.6453 27.4811 10.7438 27.3667 10.8666L20 18.2333L12.6333 10.8666C12.3964 10.6458 12.083 10.5256 11.7591 10.5313C11.4353 10.537 11.1263 10.6682 10.8973 10.8972C10.6683 11.1262 10.5371 11.4352 10.5314 11.7591C10.5257 12.0829 10.6459 12.3963 10.8667 12.6333L18.2333 19.9999L10.8667 27.3666C10.6326 27.601 10.5011 27.9187 10.5011 28.2499C10.5011 28.5812 10.6326 28.8989 10.8667 29.1333C11.101 29.3673 11.4187 29.4988 11.75 29.4988C12.0812 29.4988 12.399 29.3673 12.6333 29.1333L20 21.7666L27.3667 29.1333C27.601 29.3673 27.9187 29.4988 28.25 29.4988C28.5813 29.4988 28.899 29.3673 29.1333 29.1333C29.3674 28.8989 29.4989 28.5812 29.4989 28.2499C29.4989 27.9187 29.3674 27.601 29.1333 27.3666L21.7667 19.9999Z"
                        fill="#2F3047"
                      />
                    </svg>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* =========  mobile nav dropdown ======== */}
        <AnimatePresence>
          {isOpen && (
            <motion.nav
              className="small:hidden h-screen absolute top-[6rem] right-0 w-full z-40"
              initial="closed"
              animate="open"
              exit="exit"
              variants={backgroundVariants}
            >
              <motion.ul
                variants={navVariants} // Control the staggering here
                className="absolute left-0 w-full h-full px-2 py-20 sm:px-3 flex flex-col justify-start gap-[2.2rem] bg-theme_peach-900 items-center capitalize font-sans text-[1.9rem] text-black z-30"
              >
                {["Home", "About", "Services", "Projects", "Contact"].map(
                  (text, index) => (
                    <motion.li
                      key={index}
                      variants={itemVariants}
                      className="flex flex-col justify-center text-center w-full min-h-[4.5rem]"
                    >
                      <Link
                        href={
                          text.includes("Home")
                            ? "/"
                            : `/${text.toLowerCase().replace(" ", "")}`
                        }
                        className="h-full w-full flex items-center justify-center"
                        onClick={() => setIsOpen(!isOpen)}
                      >
                        <span className="font-[300] text-[2rem]">{text}</span>
                      </Link>
                    </motion.li>
                  )
                )}
              </motion.ul>
            </motion.nav>
          )}
        </AnimatePresence>
      </header>
    </div>
  );
}

export default Navbar;
